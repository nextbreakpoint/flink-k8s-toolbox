apiVersion: v1
kind: ConfigMap
metadata:
  name: flink-config
data:
  core-site.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
    <configuration>
    <property>
    <name>fs.s3.impl</name>
    <value>org.apache.hadoop.fs.s3a.S3AFileSystem</value>
    </property>
    <property>
    <name>fs.s3a.buffer.dir</name>
    <value>/tmp</value>
    </property>
    <property>
    <name>fs.s3a.aws.credentials.provider</name>
    <value>com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper,com.amazonaws.auth.InstanceProfileCredentialsProvider,com.amazonaws.auth.EnvironmentVariableCredentialsProvider</value>
    </property>
    </configuration>
  docker-entrypoint.sh: |
    #!/bin/bash

    cp /opt/flink/conf/flink-conf-template.yaml /opt/flink/conf/flink-conf.yaml

    if [ -n "$KEYSTORE_CONTENT" ]; then
      echo "Found keystore content"
      echo $KEYSTORE_CONTENT | base64 -d > /keystore.jks
    else
      echo "No keystore content found"
    fi

    if [ -n "$TRUSTSTORE_CONTENT" ]; then
      echo "Found truststore content"
      echo $TRUSTSTORE_CONTENT | base64 -d > /truststore.jks
    else
      echo "No truststore content found"
    fi

    if [ -z "$FLINK_ENVIRONMENT" ]; then
      echo "Flink environment not defined!!! Exiting..."
      exit 1
    fi

    if [ -z "$FLINK_CHECKPOINTS_LOCATION" ]; then
      echo "Flink savepoints location not defined. Will use default value"
    fi

    if [ -z "$FLINK_SAVEPOINTS_LOCATION" ]; then
      echo "Flink checkpoints location not defined. Will use default value"
    fi

    if [ -z "$FLINK_FS_CHECKPOINTS_LOCATION" ]; then
      echo "Flink FS checkpoints location not defined. Will use default value"
    fi

    if [ -z "$FLINK_GRAPHITE_HOST" ]; then
      echo "Graphite host not defined. Will use default value (graphite)"
      export FLINK_GRAPHITE_HOST=graphite
    fi

    if [ -z "$FLINK_GRAPHITE_PORT" ]; then
      echo "Graphite port not defined. Will use default value (2003)"
      export FLINK_GRAPHITE_PORT=2003
    fi

    if [ -z "$FLINK_GRAPHITE_PREFIX" ]; then
      echo "Graphite prefix not defined. Will use default value"
      export FLINK_GRAPHITE_PREFIX="nextbreakpoint.flink.$FLINK_ENVIRONMENT"
    fi

    if [ -z "$FLINK_PROMETHEUS_PORT" ]; then
      echo "Prometheus port not defined. Will use default value (9999)"
      export FLINK_PROMETHEUS_PORT=9999
    fi

    if [ -z "$FLINK_METRICS_REPORTERS" ]; then
      echo "Metrics reporters not defined. Will use default value (graphite)"
      export FLINK_METRICS_REPORTERS="prometheus"
    fi

    # If unspecified, the hostname of the container is taken as the JobManager address
    JOB_MANAGER_RPC_ADDRESS=${JOB_MANAGER_RPC_ADDRESS:-$(hostname -f)}

    if [ "$1" = "help" ]; then
        echo "Usage: $(basename "$0") (jobmanager|taskmanager|local|help)"
        exit 0
    elif [ "$1" = "jobmanager" ]; then
        echo "Starting Job Manager"

        echo "metrics.reporters: $FLINK_METRICS_REPORTERS" >> "$FLINK_HOME/conf/flink-conf.yaml"

        echo "metrics.reporter.prometheus.class: org.apache.flink.metrics.prometheus.PrometheusReporter" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.prometheus.port: $FLINK_PROMETHEUS_PORT" >> "$FLINK_HOME/conf/flink-conf.yaml"

        echo "metrics.reporter.graphite.class: org.apache.flink.metrics.graphite.GraphiteReporter" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.host: $FLINK_GRAPHITE_HOST" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.port: $FLINK_GRAPHITE_PORT" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.prefix: $FLINK_GRAPHITE_PREFIX" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.protocol: TCP" >> "$FLINK_HOME/conf/flink-conf.yaml"

        if [ -n "$FLINK_CHECKPOINTS_LOCATION" ]; then
          echo "state.checkpoints.dir: $FLINK_CHECKPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_SAVEPOINTS_LOCATION" ]; then
          echo "state.savepoints.dir: $FLINK_SAVEPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_FS_CHECKPOINTS_LOCATION" ]; then
          echo "state.backend.fs.checkpointdir: $FLINK_FS_CHECKPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        echo "jobmanager.rpc.address: ${JOB_MANAGER_RPC_ADDRESS}" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "blob.server.port: 6124" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "query.server.port: 6125" >> "$FLINK_HOME/conf/flink-conf.yaml"

        if [ -n "$FLINK_S3_ENDPOINT" ]; then
          echo "s3.endpoint: $FLINK_S3_ENDPOINT" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_ACCESS_KEY" ]; then
          echo "s3.access-key: $FLINK_S3_ACCESS_KEY" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_SECRET_KEY" ]; then
          echo "s3.secret-key: $FLINK_S3_SECRET_KEY" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_PATH_STYLE_ACCESS" ]; then
          echo "s3.path.style.access: $FLINK_S3_PATH_STYLE_ACCESS" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        echo "config file: " && grep '^[^\n#]' "$FLINK_HOME/conf/flink-conf.yaml"
        bash "$FLINK_HOME/bin/jobmanager.sh" start-foreground ${JOB_MANAGER_RPC_ADDRESS}
        exit 0
    elif [ "$1" = "taskmanager" ]; then
        if [ -z "$TASK_MANAGER_NUMBER_OF_TASK_SLOTS" ]; then
          export TASK_MANAGER_NUMBER_OF_TASK_SLOTS=${TASK_MANAGER_NUMBER_OF_TASK_SLOTS:-$(grep -c ^processor /proc/cpuinfo)}
        fi

        echo "Starting Task Manager"

        echo "metrics.reporters: $FLINK_METRICS_REPORTERS" >> "$FLINK_HOME/conf/flink-conf.yaml"

        echo "metrics.reporter.prometheus.class: org.apache.flink.metrics.prometheus.PrometheusReporter" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.prometheus.port: $FLINK_PROMETHEUS_PORT" >> "$FLINK_HOME/conf/flink-conf.yaml"

        echo "metrics.reporter.graphite.class: org.apache.flink.metrics.graphite.GraphiteReporter" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.host: $FLINK_GRAPHITE_HOST" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.port: $FLINK_GRAPHITE_PORT" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.prefix: $FLINK_GRAPHITE_PREFIX" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "metrics.reporter.graphite.protocol: TCP" >> "$FLINK_HOME/conf/flink-conf.yaml"

        if [ -n "$FLINK_CHECKPOINTS_LOCATION" ]; then
          echo "state.checkpoints.dir: $FLINK_CHECKPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_SAVEPOINTS_LOCATION" ]; then
          echo "state.savepoints.dir: $FLINK_SAVEPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_FS_CHECKPOINTS_LOCATION" ]; then
          echo "state.backend.fs.checkpointdir: $FLINK_FS_CHECKPOINTS_LOCATION" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        echo "jobmanager.rpc.address: ${JOB_MANAGER_RPC_ADDRESS}" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "taskmanager.numberOfTaskSlots: $TASK_MANAGER_NUMBER_OF_TASK_SLOTS" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "blob.server.port: 6124" >> "$FLINK_HOME/conf/flink-conf.yaml"
        echo "query.server.port: 6125" >> "$FLINK_HOME/conf/flink-conf.yaml"

        if [ -n "$FLINK_S3_ENDPOINT" ]; then
          echo "s3.endpoint: $FLINK_S3_ENDPOINT" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_ACCESS_KEY" ]; then
          echo "s3.access-key: $FLINK_S3_ACCESS_KEY" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_SECRET_KEY" ]; then
          echo "s3.secret-key: $FLINK_S3_SECRET_KEY" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        if [ -n "$FLINK_S3_PATH_STYLE_ACCESS" ]; then
          echo "s3.path.style.access: $FLINK_S3_PATH_STYLE_ACCESS" >> "$FLINK_HOME/conf/flink-conf.yaml"
        fi

        echo "config file: " && grep '^[^\n#]' "$FLINK_HOME/conf/flink-conf.yaml"
        bash "$FLINK_HOME/bin/taskmanager.sh" start-foreground
        exit 0
    elif [ "$1" = "local" ]; then
        echo "Starting local cluster"
        bash "$FLINK_HOME/bin/jobmanager.sh" start-foreground local
        exit 0
    else
        exec "$@"
    fi
  flink-conf.yaml: |
    ################################################################################
    #  Licensed to the Apache Software Foundation (ASF) under one
    #  or more contributor license agreements.  See the NOTICE file
    #  distributed with this work for additional information
    #  regarding copyright ownership.  The ASF licenses this file
    #  to you under the Apache License, Version 2.0 (the
    #  "License"); you may not use this file except in compliance
    #  with the License.  You may obtain a copy of the License at
    #
    #      http://www.apache.org/licenses/LICENSE-2.0
    #
    #  Unless required by applicable law or agreed to in writing, software
    #  distributed under the License is distributed on an "AS IS" BASIS,
    #  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #  See the License for the specific language governing permissions and
    # limitations under the License.
    ################################################################################


    #==============================================================================
    # Common
    #==============================================================================

    # The external address of the host on which the JobManager runs and can be
    # reached by the TaskManagers and any clients which want to connect. This setting
    # is only used in Standalone mode and may be overwritten on the JobManager side
    # by specifying the --host <hostname> parameter of the bin/jobmanager.sh executable.
    # In high availability mode, if you use the bin/start-cluster.sh script and setup
    # the conf/masters file, this will be taken care of automatically. Yarn/Mesos
    # automatically configure the host name based on the hostname of the node where the
    # JobManager runs.

    jobmanager.rpc.address: jobmanager-test

    # The RPC port where the JobManager is reachable.

    jobmanager.rpc.port: 6123


    # The heap size for the JobManager JVM

    jobmanager.heap.size: 1024m


    # The heap size for the TaskManager JVM

    taskmanager.heap.size: 1024m


    # The number of task slots that each TaskManager offers. Each slot runs one parallel pipeline.

    taskmanager.numberOfTaskSlots: 1

    # The parallelism used for programs that did not specify and other parallelism.

    parallelism.default: 1

    # The default file system scheme and authority.
    #
    # By default file paths without scheme are interpreted relative to the local
    # root file system 'file:///'. Use this to override the default and interpret
    # relative paths relative to a different file system,
    # for example 'hdfs://mynamenode:12345'
    #
    # fs.default-scheme

    #==============================================================================
    # High Availability
    #==============================================================================

    # The high-availability mode. Possible options are 'NONE' or 'zookeeper'.
    #
    # high-availability: zookeeper

    # The path where metadata for master recovery is persisted. While ZooKeeper stores
    # the small ground truth for checkpoint and leader election, this location stores
    # the larger objects, like persisted dataflow graphs.
    #
    # Must be a durable file system that is accessible from all nodes
    # (like HDFS, S3, Ceph, nfs, ...)
    #
    # high-availability.storageDir: hdfs:///flink/ha/

    # The list of ZooKeeper quorum peers that coordinate the high-availability
    # setup. This must be a list of the form:
    # "host1:clientPort,host2:clientPort,..." (default clientPort: 2181)
    #
    # high-availability.zookeeper.quorum: localhost:2181


    # ACL options are based on https://zookeeper.apache.org/doc/r3.1.2/zookeeperProgrammers.html#sc_BuiltinACLSchemes
    # It can be either "creator" (ZOO_CREATE_ALL_ACL) or "open" (ZOO_OPEN_ACL_UNSAFE)
    # The default value is "open" and it can be changed to "creator" if ZK security is enabled
    #
    # high-availability.zookeeper.client.acl: open

    #==============================================================================
    # Fault tolerance and checkpointing
    #==============================================================================

    # The backend that will be used to store operator state checkpoints if
    # checkpointing is enabled.
    #
    # Supported backends are 'jobmanager', 'filesystem', 'rocksdb', or the
    # <class-name-of-factory>.
    #
    state.backend: filesystem

    # Directory for checkpoints filesystem, when using any of the default bundled
    # state backends.
    #
    # state.checkpoints.dir: hdfs://namenode-host:port/flink-checkpoints

    # Default target directory for savepoints, optional.
    #
    # state.savepoints.dir: hdfs://namenode-host:port/flink-checkpoints

    # Flag to enable/disable incremental checkpoints for backends that
    # support incremental checkpoints (like the RocksDB state backend).
    #
    # state.backend.incremental: false

    #==============================================================================
    # Web Frontend
    #==============================================================================

    # The address under which the web-based runtime monitor listens.
    #
    #web.address: 0.0.0.0

    # The port under which the web-based runtime monitor listens.
    # A value of -1 deactivates the web server.

    rest.port: 8081

    # Flag to specify whether job submission is enabled from the web-based
    # runtime monitor. Uncomment to disable.

    #web.submit.enable: false

    #==============================================================================
    # Advanced
    #==============================================================================

    # Override the directories for temporary files. If not specified, the
    # system-specific Java temporary directory (java.io.tmpdir property) is taken.
    #
    # For framework setups on Yarn or Mesos, Flink will automatically pick up the
    # containers' temp directories without any need for configuration.
    #
    # Add a delimited list for multiple directories, using the system directory
    # delimiter (colon ':' on unix) or a comma, e.g.:
    #     /data1/tmp:/data2/tmp:/data3/tmp
    #
    # Note: Each directory entry is read from and written to by a different I/O
    # thread. You can include the same directory multiple times in order to create
    # multiple I/O threads against that directory. This is for example relevant for
    # high-throughput RAIDs.
    #
    # io.tmp.dirs: /tmp

    # Specify whether TaskManager's managed memory should be allocated when starting
    # up (true) or when memory is requested.
    #
    # We recommend to set this value to 'true' only in setups for pure batch
    # processing (DataSet API). Streaming setups currently do not use the TaskManager's
    # managed memory: The 'rocksdb' state backend uses RocksDB's own memory management,
    # while the 'memory' and 'filesystem' backends explicitly keep data as objects
    # to save on serialization cost.
    #
    # taskmanager.memory.preallocate: false

    # The classloading resolve order. Possible values are 'child-first' (Flink's default)
    # and 'parent-first' (Java's default).
    #
    # Child first classloading allows users to use different dependency/library
    # versions in their application than those in the classpath. Switching back
    # to 'parent-first' may help with debugging dependency issues.
    #
    # classloader.resolve-order: child-first

    # The amount of memory going to the network stack. These numbers usually need
    # no tuning. Adjusting them may be necessary in case of an "Insufficient number
    # of network buffers" error. The default min is 64MB, teh default max is 1GB.
    #
    # taskmanager.network.memory.fraction: 0.1
    # taskmanager.network.memory.min: 64mb
    # taskmanager.network.memory.max: 1gb

    #==============================================================================
    # Flink Cluster Security Configuration
    #==============================================================================

    # Kerberos authentication for various components - Hadoop, ZooKeeper, and connectors -
    # may be enabled in four steps:
    # 1. configure the local krb5.conf file
    # 2. provide Kerberos credentials (either a keytab or a ticket cache w/ kinit)
    # 3. make the credentials available to various JAAS login contexts
    # 4. configure the connector to use JAAS/SASL

    # The below configure how Kerberos credentials are provided. A keytab will be used instead of
    # a ticket cache if the keytab path and principal are set.

    # security.kerberos.login.use-ticket-cache: true
    # security.kerberos.login.keytab: /path/to/kerberos/keytab
    # security.kerberos.login.principal: flink-user

    # The configuration below defines which JAAS login contexts

    # security.kerberos.login.contexts: Client,KafkaClient

    #==============================================================================
    # ZK Security Configuration
    #==============================================================================

    # Below configurations are applicable if ZK ensemble is configured for security

    # Override below configuration to provide custom ZK service name if configured
    # zookeeper.sasl.service-name: zookeeper

    # The configuration below must match one of the values set in "security.kerberos.login.contexts"
    # zookeeper.sasl.login-context-name: Client

    #==============================================================================
    # HistoryServer
    #==============================================================================

    # The HistoryServer is started and stopped via bin/historyserver.sh (start|stop)

    # Directory to upload completed jobs to. Add this directory to the list of
    # monitored directories of the HistoryServer as well (see below).
    #jobmanager.archive.fs.dir: hdfs:///completed-jobs/

    # The address under which the web-based HistoryServer listens.
    #historyserver.web.address: 0.0.0.0

    # The port under which the web-based HistoryServer listens.
    #historyserver.web.port: 8082

    # Comma separated list of directories to monitor for completed jobs.
    #historyserver.archive.fs.dir: hdfs:///completed-jobs/

    # Interval in milliseconds for refreshing the monitored directories.
    #historyserver.archive.fs.refresh-interval: 10000

    blob.server.port: 6124
    query.server.port: 6125

    jobmanager.log.path: /var/log/jobmanager.log
    taskmanager.log.path: /var/log/taskmanager.log

    io.tmp.dirs: /var/tmp

    metrics.reporters: prometheus

    metrics.reporter.prometheus.class: org.apache.flink.metrics.prometheus.PrometheusReporter
    metrics.reporter.prometheus.port: 9999

    web.timeout: 60000
